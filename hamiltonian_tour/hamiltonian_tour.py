# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h-CWmlIYOIWmA2FyhVInfVuSgShWj3Se

# Hamiltonian Tour
"""

def hamiltonian_tour(adj_matrix, start):
    n = len(adj_matrix)
    visited = [False] * n
    path = [start[0]]
    min_cost = float('inf')
    best_path = []

    def backtrack(curr, cost, count):
        nonlocal min_cost, best_path
        if count == n:
            if adj_matrix[curr][start[0]] != 0:
                cost += adj_matrix[curr][start[0]]
                if cost < min_cost:
                    min_cost = cost
                    best_path = path.copy()
        for i in range(n):
            if not visited[i] and adj_matrix[curr][i] != 0:
                visited[i] = True
                path.append(i)
                backtrack(i, cost + adj_matrix[curr][i], count + 1)
                visited[i] = False
                path.pop()

    visited[start[0]] = True
    backtrack(start[0], 0, 1)

    # Get the row index and column index of the start point
    start_row_index = start[0]
    start_col_index = best_path[0]

    return [(best_path[i], best_path[i + 1]) for i in range(len(best_path) - 1)] + [(best_path[-1], start_row_index)]

# Example usage
adj_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
start_element = (0, 1)  # Start point as a tuple

finest_hamiltonian_tour = hamiltonian_tour(adj_matrix, start_element)
print(finest_hamiltonian_tour)

